trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: TestWebsiteWithZap
  dependsOn: InstallZap
  steps:
  - script: |
      # Start ZAP in daemon mode (headless)
      zap.sh -daemon -port 8080 -config api.disablekey=true

      # Wait for ZAP to start
      sleep 10

      # Spider and scan your website (modify the website URL as needed)
      zap-cli -p 8080 -z "spider target=http://localhost:8089/ recurse=1 maxchildren=10"
      zap-cli -p 8080 -z "active-scan target=http://localhost:8089/ recurse=1 maxchildren=10"

      # Generate a ZAP report in NUnit XML format
      zap-cli -p 8080 -z "report -o zap-report.xml -f nunit-xml"

      # Optional: Save the report as an artifact
      mv zap-report.xml $(Build.ArtifactStagingDirectory)/

    displayName: 'Run ZAP Scan'

- job: TestWebsiteWithZap
  dependsOn: InstallZap
  steps:
  - script: |
      # Start ZAP in daemon mode (headless)
      $(Agent.ToolsDirectory)/zap/ZAP_$zapVersion/zap.sh -daemon -port 8080 -config api.disablekey=true

      # Wait for ZAP to start
      sleep 10

      # Spider and scan your website (modify the website URL as needed)
      $(Agent.ToolsDirectory)/zap/ZAP_$zapVersion/zap-cli -p 8080 -z "spider target=http://localhost:8089/ recurse=1 maxchildren=10"
      $(Agent.ToolsDirectory)/zap/ZAP_$zapVersion/zap-cli -p 8080 -z "active-scan target=http://localhost:8089/ recurse=1 maxchildren=10"

      # Generate a ZAP report in NUnit XML format
      $(Agent.ToolsDirectory)/zap/ZAP_$zapVersion/zap-cli -p 8080 -z "report -o zap-report.xml -f nunit-xml"

      # Optional: Save the report as an artifact
      mv zap-report.xml $(Build.ArtifactStagingDirectory)/
    displayName: 'Run ZAP Scan'

- job: PublishNUnitReport
  dependsOn: TestWebsiteWithZap
  steps:
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/zap-report.xml'
      testRunTitle: 'ZAP Scan'
      testRunSystem: 'ZAP'
    displayName: 'Publish ZAP Test Results'

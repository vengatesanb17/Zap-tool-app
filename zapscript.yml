# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**/*.js'  # You can specify the file pattern to match the files you want to copy.
    TargetFolder: '$(Build.ArtifactStagingDirectory)/copied-reports'  # Specify the target folder where the files will be copied.
    CleanTargetFolder: true 
    
- script: |
    # Start OWASP ZAP in daemon mode and listen on a specific port (e.g., 8080)
    zap.sh -daemon -port 8080

    # Configure your application or HTTP client to use ZAP as a proxy
    # Replace 172.17.0.1 with the actual IP address of your ZAP instance
    export http_proxy=http://172.17.0.1:8080
    export https_proxy=http://172.17.0.1:8080

    # Run your application or make HTTP requests to http://172.17.0.1:80
    # ZAP will intercept and scan the traffic

    # Stop OWASP ZAP when done
    zap.sh -cmd -shutdown
  displayName: 'Run OWASP ZAP as a Proxy'
  condition: succeededOrFailed()
  
- task: owaspzap@1
  inputs:
    aggressivemode: true
    threshold: '50'
    scantype: 'Active Scan'
    url: 'http://testphp.vulnweb.com/' # Replace with your target URL
    scriptname: 'exclude-domains.js'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
    ArtifactName: zap
- bash: |
   sudo npm install -g handlebars-cmd
   cat <<EOF > owaspzap/nunit-template.hbs
   {{#each site}}
   <test-run
       id="2"
       name="Owasp test"
       start-time="{{../[@generated]}}"  >
       <test-suite
           id="{{@index}}"
           type="Assembly"
           name="{{[@name]}}"
           result="Failed"
           failed="{{alerts.length}}">
           <attachments>
               <attachment>
                   <filePath>owaspzap/report.html</filePath>
               </attachment>
           </attachments>
       {{#each alerts}}<test-case
           id="{{@index}}"
           name="{{alert}}"
           result="Failed"
           fullname="{{alert}}"
           time="1">
               <failure>
                   <message>
                       <![CDATA[{{{desc}}}]]>
                   </message>
                   <stack-trace>
                       <![CDATA[
   Solution:
   {{{solution}}}
   Reference:
   {{{reference}}}
   instances:{{#each instances}}
   * {{uri}}
       - {{method}}
       {{#if evidence}}- {{{evidence}}}{{/if}}
                       {{/each}}]]>
                   </stack-trace>
               </failure>
       </test-case>
       {{/each}}
       </test-suite>
   </test-run>
   {{/each}}
   EOF
  displayName: 'owasp nunit template'

- bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
  displayName: 'generate nunit type file'
  condition: always()


- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'owaspzap/test-results.xml'
  condition: always()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
    ArtifactName: 'ZAP Reports'

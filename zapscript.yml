# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: owaspzap@1
  inputs:
    threshold: '300'
    scantype: 'targetedScan'
    url: 'http://testphp.vulnweb.com/' # Replace with your target URL


- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
    ArtifactName: zap

{{#each site}}
<test-run id="2" name="OWASP ZAP Scan Results" start-time="{{../@generated}}">
  {{#if alerts.length}}
  <test-suite id="{{@index}}" type="OWASP ZAP Scan" name="{{@name}}" result="Failed">
    <attachments>
      <attachment>
        <filePath>owaspzap/report.html</filePath>
      </attachment>
    </attachments>
    {{#each alerts}}
    <test-case id="{{@index}}" name="{{alert}}" result="Failed" fullname="{{alert}}" time="1">
      <failure>
        <message>
          <![CDATA[
            Description: {{desc}}
            Solution: {{solution}}
            Reference: {{reference}}
          ]]>
        </message>
        <stack-trace>
          <![CDATA[
            Instances:
            {{#each instances}}
              * URI: {{uri}}
                - Method: {{method}}
                {{#if evidence}}- Evidence: {{{evidence}}}{{/if}}
            {{/each}}
          ]]>
        </stack-trace>
      </failure>
    </test-case>
    {{/each}}
  </test-suite>
  {{else}}
  <test-suite id="{{@index}}" type="OWASP ZAP Scan" name="{{@name}}" result="Passed">
  </test-suite>
  {{/if}}
</test-run>
{{/each}}

  displayName: 'owasp nunit template'
  condition: always()
- bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
  displayName: 'generate nunit type file'
  condition: always()


- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'owaspzap/test-results.xml'
  condition: always()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
    ArtifactName: 'ZAP Reports'
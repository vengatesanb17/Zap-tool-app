trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    # Install .NET SDK and the OWASP ZAP NuGet package
    sudo apt-get update
    sudo apt-get install -y apt-transport-https
    sudo apt-get install -y dotnet-sdk-3.1  # Use the appropriate version
    dotnet tool install --global owasp-zap-api-cli

    # Start the OWASP ZAP daemon
    zap-api start -v -p 8080 -d -quickurl http://testphp.vulnweb.com/
    
    # Wait for ZAP to start (adjust sleep time as needed)
    sleep 30
    
    # Perform a quick scan using ZAP API
    zap-api quick-scan -t http://testphp.vulnweb.com/
  displayName: 'Run OWASP ZAP Scan'

- script: |
    # Generate a ZAP report
    zap-api generate-report -f html -o zap-report.html
    
    # Copy the ZAP report to the agent workspace
    cp zap-report.html $(Build.ArtifactStagingDirectory)/zap-report.html
  displayName: 'Generate and Copy ZAP Report'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'zap-reports'
    publishLocation: 'pipeline'
  condition: succeededOrFailed()


# - task: owaspzap@1
#   inputs:
#     aggressivemode: false
#     threshold: '232'
#     scantype: 'targetedScan'
#     url: 'http://testphp.vulnweb.com/'
#     port: 'http://testphp.vulnweb.com/:80'
#     provideCustomContext: true
#     contextPath: '/home/vsts/work/1/s/exclude-domains.js'
#   enabled: true

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
#     ArtifactName: zap
# - bash: |
#    sudo npm install -g handlebars-cmd
#    cat <<EOF > owaspzap/nunit-template.hbs
#    {{#each site}}
#    <test-run
#        id="2"
#        name="Owasp test"
#        start-time="{{../[@generated]}}"  >
#        <test-suite
#            id="{{@index}}"
#            type="Assembly"
#            name="{{[@name]}}"
#            result="Failed"
#            failed="{{alerts.length}}">
#            <attachments>
#                <attachment>
#                    <filePath>owaspzap/report.html</filePath>
#                </attachment>
#            </attachments>
#        {{#each alerts}}<test-case
#            id="{{@index}}"
#            name="{{alert}}"
#            result="Failed"
#            fullname="{{alert}}"
#            time="1">
#                <failure>
#                    <message>
#                        <![CDATA[{{{desc}}}]]>
#                    </message>
#                    <stack-trace>
#                        <![CDATA[
#    Solution:
#    {{{solution}}}
#    Reference:
#    {{{reference}}}
#    instances:{{#each instances}}
#    * {{uri}}
#        - {{method}}
#        {{#if evidence}}- {{{evidence}}}{{/if}}
#                        {{/each}}]]>
#                    </stack-trace>
#                </failure>
#        </test-case>
#        {{/each}}
#        </test-suite>
#    </test-run>
#    {{/each}}
#    EOF
#   displayName: 'owasp nunit template'
#   enabled: true

# - task: PublishTestResults@2
#   displayName: 'Publish Test Results **/TEST-*.xml'
#   inputs:
#     testResultsFormat: NUnit
#     testResultsFiles: 'owaspzap/test-results.xml'
#   condition: always()
#   enabled: true

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
#     ArtifactName: 'ZAP Reports'
#   enabled: true
